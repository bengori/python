"""
3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только
чисел. Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные
и заполнять список. Класс-исключение должен контролировать типы данных элементов списка.
Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не
остановит работу скрипта, введя, например, команду “stop”. При этом скрипт завершается, сформированный
список выводится на экран. Подсказка: для данного задания примем, что пользователь может вводить
только числа и строки. При вводе пользователем очередного элемента необходимо реализовать проверку
типа элемента и вносить его в список, только если введено число. Класс-исключение должен не позволить
 пользователю ввести текст (не число) и отобразить соответствующее сообщение. При этом работа скрипта
не должна завершаться.
"""


class MyErrorNotNumber(Exception):

    def __init__(self, txt=''):
        self.txt = txt


def is_number(date):
    """
    Функция проверяет являются ли данные числом
    Возвращает True or False
    """
    if date.isdigit():
        return True
    else:
        try:
            float(date)
            return True
        except ValueError:
            return False


list_number = []
exit_program = False

while exit_program == 0:
    try:
        user_answer = input('Введите число для добавления в список через пробел (для выхода нажмите q):\n>>>')
        if user_answer == 'q'.lower():
            exit_program = True
        if is_number(user_answer) == 0:
            raise MyErrorNotNumber()
    except MyErrorNotNumber as e:
        print(f'Недопустимый тип данных, вы ввели не число')
    else:
        list_number.append(float(user_answer))

print(list_number)
